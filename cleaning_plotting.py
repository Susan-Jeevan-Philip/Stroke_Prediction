# -*- coding: utf-8 -*-
"""Cleaning_Plotting.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vee6ZGanr2Fa23YDHvImqcg1mPG1mte6
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
from datetime import datetime
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn import metrics
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier

pd.options.mode.copy_on_write = True # Allow re-write on variable
sns.set_style('darkgrid') # Seaborn style
warnings.filterwarnings('ignore') # Ignore warnings
pd.set_option('display.max_columns', None) # Setting this option will print all collumns of a dataframe
pd.set_option('display.max_colwidth', None) # Setting this option will print all of the data in a feature

from google.colab import drive
drive.mount("/content/gdrive")

data = pd.read_csv('/content/gdrive/MyDrive/MiniProject/archive/healthcare-dataset-stroke-data.csv')
data.head()

# Drop column = 'id'
data.drop(columns='id', inplace=True)

data.info()

round(data.describe(include='all'), 2)

data.isna().sum()

print((data.isna().sum()/len(data))*100)

print(data['gender'].unique())

total_inputs=data.size
print(f"Total input in dataset : {total_inputs}")

f_sum=data[data['gender'] == 'Female']['bmi'].dropna().sum()
m_sum=data[data['gender'] == 'Male']['bmi'].dropna().sum()
total=data['bmi'].dropna().sum()

female_bmi_avg = data[data['gender'] == 'Female']['bmi'].dropna().mean()
male_bmi_avg = data[data['gender'] == 'Male']['bmi'].dropna().mean()



avg=data['bmi'].dropna().mean()
mid=data['bmi'].dropna().median()
print(f"avg of :{avg}")
print(f"median of :{mid}")



print(f"Sum BMI for females: {f_sum}")
print(f"Sum BMI for males: {m_sum}")
print(f"Total BMI : {total}")

print(f"Average BMI for females: {female_bmi_avg}")
print(f"Average BMI for males: {male_bmi_avg}")

data[data['bmi'].isna()]

data['bmi']=data['bmi'].fillna(28.1)

cols = data.columns[:-1]
cols

df=pd.DataFrame(data)

df

def categorize_age_df(df):
    bins = [0, 18, 40, float("inf")]
    labels = [0, 1, 2]
    df["age"] = pd.cut(df["age"], bins=bins, labels=labels)
    return df

def categorize_bmi_df(df):
    bins = 3
    labels = [0, 1, 2]
    df["bmi"] = pd.cut(df["bmi"], bins=bins, labels=labels)
    return df

def categorize_glu_df(df):
    bins = 3
    labels = [0, 1, 2]
    df["avg_glucose_level"] = pd.cut(df["avg_glucose_level"], bins=bins, labels=labels)
    return df

t1=categorize_age_df(df)

t2=categorize_bmi_df(df)

t3=categorize_glu_df(df)

numeric_columns = ['age', 'bmi', 'avg_glucose_level']
categorical_columns = ['gender', 'hypertension', 'heart_disease', 'ever_married', 'work_type', 'Residence_type', 'smoking_status', 'stroke']

i = 0
fig, ax = plt.subplots(3, 1, figsize=(3,9))
plt.subplots_adjust(hspace = 0.5)
for num_col in numeric_columns :
    sns.kdeplot(x=num_col, hue='stroke', data=data, multiple='stack', ax=ax[i])
    i+=1
plt.show()

i=0
while i<8 :

    # Left AX
    fig = plt.figure(figsize=(10, 4))
    plt.subplot(1, 2, 1)
    plt.title(categorical_columns[i], size=0.5, weight='bold', color='navy')
    ax = sns.countplot(x=categorical_columns[i], data=data)
    ax.bar_label(ax.containers[0])
    ax.tick_params(axis='x', rotation=300)
    i+=1

    # Right AX
    plt.subplot(1, 2, 2)
    plt.title(categorical_columns[i], size=2, weight='bold', color='navy')
    ax = sns.countplot(x=categorical_columns[i], data=data)
    ax.bar_label(ax.containers[0])
    ax.tick_params(axis='x', rotation=300)
    i+=1
    plt.show()

x = data['stroke'].value_counts()


explode = [0, 0.15]
labels = ['Stroke=0', 'Stroke=1']
fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(aspect="equal"))

plt.pie(x, explode=explode, shadow=True, autopct='%1.1f%%', labels=labels, textprops=dict(color="w", weight='bold', size=15))
plt.legend()
plt.show()