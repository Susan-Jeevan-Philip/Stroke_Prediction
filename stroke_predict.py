# -*- coding: utf-8 -*-
"""Stroke_Predict.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_qCn_pD_jlYQ-Z_qvA6DvwIbayB4QdOd
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt



################### Sklearn ####################################
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn import metrics
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB

from statistics import mode
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix,recall_score, precision_score, f1_score

from google.colab import drive
drive.mount("/content/gdrive")

data = pd.read_csv('/content/gdrive/MyDrive/MiniProject/archive/healthcare-dataset-stroke-data.csv')
data.head()

# Drop column = 'id'
data.drop(columns='id', inplace=True)

data

round(data.describe(include='all'), 2)

"""**Missing Values Handling**"""

data.isna().sum()

print((data.isna().sum()/len(data))*100)

"""Even though the missing data is approx 4% of the total inputs, when it comes to inputs it is 201(a big number of inputs)---> analysing other bmi values to fill the missing data."""

print(data['gender'].unique())

total_inputs=data.size
print(f"Total input in dataset : {total_inputs}")

f_sum=data[data['gender'] == 'Female']['bmi'].dropna().sum()
m_sum=data[data['gender'] == 'Male']['bmi'].dropna().sum()
total=data['bmi'].dropna().sum()

female_bmi_avg = data[data['gender'] == 'Female']['bmi'].dropna().mean()
male_bmi_avg = data[data['gender'] == 'Male']['bmi'].dropna().mean()
other_bmi_avg = data[data['gender'] == 'Other']['bmi'].dropna().mean()

print(f"Sum BMI for females: {f_sum}")
print(f"Sum BMI for males: {m_sum}")
print(f"Total BMI value : {total}")

avg=data['bmi'].dropna().mean()
mid=data['bmi'].dropna().median()
print(f"avg of :{avg}")
print(f"median of :{mid}")

print(f"Average BMI for females: {female_bmi_avg}")
print(f"Average BMI for males: {male_bmi_avg}")
print(f"Average BMI for others: {other_bmi_avg}")

data[data['bmi'].isna()]

data['bmi']=data['bmi'].fillna(28.1)

data

data.shape

numeric_columns = ['age', 'bmi', 'avg_glucose_level']
categorical_columns = ['gender', 'hypertension', 'heart_disease', 'ever_married', 'work_type', 'Residence_type', 'smoking_status', 'stroke']

"""We count number of unique values in each categorical column, to change them with integer values. Here we use .unique() command"""

columns_temp = ['gender', 'ever_married', 'work_type', 'smoking_status', 'Residence_type']

for col in columns_temp :
    print('column :', col)
    for index, unique in enumerate(data[col].unique()) :
        print(unique, ':', index)
    print('_'*45)

# gender
data_2 = data.replace(
    {'gender' : {'Male' : 0, 'Female' : 1, 'Other' : 2}}
)

# ever_married
data_2 =  data_2.replace(
    {'ever_married' : {'Yes' : 0, 'No' : 1}}
)

# work_type
data_2 =  data_2.replace(
    {'work_type' : {'Private' : 0, 'Self-employed' : 1, 'Govt_job' : 2, 'children' : 3, 'Never_worked' : 4}}
)

# smoking_status
data_2 =  data_2.replace(
    {'smoking_status' : {'formerly smoked' : 0, 'never smoked' : 1, 'smokes' : 2, 'Unknown' : 3}}
)

# Residence_type
data_2 =  data_2.replace(
    {'Residence_type' : {'Urban' : 0, 'Rural' : 1}}
)

def categorize_age_df(df):
    bin_age = [0, 18, 40, float("inf")]
    bin_bmi = [0, 30, 60, float("inf")]
    bin_glu = [0, 100, 200, float("inf")]
    labels = [0, 1, 2]
    df["age"] = pd.cut(df["age"], bins=bin_age, labels=labels)
    df["bmi"] = pd.cut(df["bmi"], bins=bin_bmi, labels=labels)
    df["avg_glucose_level"] = pd.cut(df["avg_glucose_level"], bins=bin_glu, labels=labels)
    return df

data_3=categorize_age_df(data_2)

data_3

df = pd.DataFrame(data)
cols=df.columns
print(cols)

X= data_3.drop(columns='stroke')
y = data_3.stroke

X

"""Confusion Metrics"""

def plot_confusion_matrix(y_test, y_prediction):
    cm = metrics.confusion_matrix(y_test, y_prediction)
    ax = plt.subplot()
    ax = sns.heatmap(cm, annot=True, fmt='', cmap="Greens")
    ax.set_xlabel('Prediced labels')
    ax.set_ylabel('True labels')
    ax.set_title('Confusion Matrix')
    ax.xaxis.set_ticklabels(['Dont Had Stroke', 'Had Stroke'])
    ax.yaxis.set_ticklabels(['Dont Had Stroke', 'Had Stroke'])
    plt.show()

X = X.astype("int64")
y = y.astype("int64")

X_train, X_test, Y_train, Y_test = train_test_split(X, y, random_state=0, test_size=0.25)

X_train = X_train.astype("int64")

"""**Decision** **Tree**"""

model_DT = DecisionTreeClassifier()
model_DT.fit(X_train, Y_train)

y_DT = model_DT.predict(X_test)

plot_confusion_matrix(Y_test,y_DT)

accuracy = accuracy_score(Y_test, y_DT)
accuracy

f1 = f1_score(Y_test, y_DT, average='weighted')
print(f1)

f1 = f1_score(Y_test, y_DT, average='micro')
print(f1)

recall_1=recall_score(Y_test,y_DT,average='micro')
print(recall_1)

recall_1=recall_score(Y_test,y_DT,average='weighted')
print(recall_1)

precision_1 = precision_score(Y_test,y_DT,average='micro')
precision_1

"""**RandomForest**"""

model_RF= RandomForestClassifier()
model_RF.fit(X_train,Y_train)

y_RFC= model_RF.predict(X_test)

plot_confusion_matrix(Y_test,y_RFC)

accuracy_2 = accuracy_score(Y_test,y_RFC)
accuracy_2

recall_2=recall_score(Y_test,y_RFC,average='micro')
recall_2

recall_2=recall_score(Y_test,y_RFC,average='weighted')
recall_2

precision_2 = precision_score(Y_test,y_RFC,average='micro')
precision_2

"""**NaiveBayes**

"""

model_NB= GaussianNB()
model_NB.fit(X_train,Y_train)
y_GNB=model_NB.predict(X_test)

accuracy_3 = accuracy_score(Y_test,y_GNB)
accuracy_3

plot_confusion_matrix(Y_test,y_GNB)

recall_3=recall_score(Y_test,y_GNB,average='micro')
recall_3

recall_3=recall_score(Y_test,y_GNB,average='weighted')
recall_3

precision_3 = precision_score(Y_test,y_GNB,average='micro')
precision_3

"""**Support Vector Machine(SVM)**"""

svm_model = SVC()
svm_model.fit(X_train, Y_train)
svm_pred = svm_model.predict(X_test)

plot_confusion_matrix(Y_test,svm_pred)

accuracy_4=accuracy_score(Y_test,svm_pred)
print(accuracy_4)

recall_4=recall_score(Y_test,svm_pred,average='micro')
recall_4

precision_4 = precision_score(Y_test, svm_pred ,average='micro')
print(precision_3)

def pre_process(df_input):
  # gender
  df_input = df_input.replace(
      {'gender' : {'Male' : 0, 'Female' : 1, 'Other' : 2}}
  )

  # ever_married
  df_input =  df_input.replace(
      {'ever_married' : {'Yes' : 0, 'No' : 1}}
  )

  # work_type
  df_input =  df_input.replace(
      {'work_type' : {'Private' : 0, 'Self-employed' : 1, 'Govt_job' : 2, 'children' : 3, 'Never_worked' : 4}}
  )
  # smoking_status
  df_input =  df_input.replace(
      {'smoking_status' : {'formerly smoked' : 0, 'never smoked' : 1, 'smokes' : 2, 'Unknown' : 3}}
  )

  # Residence_type
  df_input =  df_input.replace(
      {'Residence_type' : {'Urban' : 0, 'Rural' : 1}}
  )
  bin_age = [0, 18, 40, float("inf")]
  bin_bmi = [0, 30, 60, float("inf")]
  bin_glu = [0, 100, 200, float("inf")]
  labels = [0, 1, 2]
  df_input["age"] = pd.cut(df_input["age"], bins=bin_age, labels=labels)
  df_input["bmi"] = pd.cut(df_input["bmi"], bins=bin_bmi, labels=labels)
  df_input["avg_glucose_level"] = pd.cut(df_input["avg_glucose_level"], bins=bin_glu, labels=labels)
  return df_input

def Predictions(input_data):
    dt_prediction=model_DT.predict(input_data)[0]
    rf_prediction =model_RF.predict(input_data)[0]
    nb_prediction = model_NB.predict(input_data)[0]
    svm_prediction = svm_model.predict(input_data)[0]

    final_prediction = mode([dt_prediction,rf_prediction, nb_prediction, svm_prediction])
    predictions = {
        "dt_model_prediction": dt_prediction,
        "rf_model_prediction": rf_prediction,
        "naive_bayes_prediction": nb_prediction,
        "svm_model_prediction": svm_prediction,
        "final_prediction":final_prediction
    }
    return predictions

cols = ["gender", "age", "hypertension", "heart_disease", "ever_married", "work_type", "Residence_type", "avg_glucose_level", "bmi", "smoking_status"]
input_user = "Male,67,0,1,Yes,Private,Urban,222.69,36.6,formerly smoked"
l = input_user.split(",")
for i in range(len(l)):
  if l[i].isnumeric():
    l[i]=int(l[i])
l[7]=float(l[7])
l[8]=float(l[8])
df_input = pd.DataFrame([l], columns=cols)
df_input.info()
print(l)

dd=pre_process(df_input)
dd

dd = dd.astype("int64")

dd.info()

s = np.array([0,2,0,1,0,0,0,2,1,0])

X_train.info()

dd=dd.astype("int64")
dd.info()

model_DT.predict(dd)

model_RF.predict(dd)

model_NB.predict(dd)

svm_model.predict(dd)[0]

mode([1,1,0])

Predictions(dd)

"""The patient is likely to get a stroke ."""